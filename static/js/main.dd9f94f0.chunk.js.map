{"version":3,"sources":["component/Filter/filter.module.css","component/Forma/forma.module.css","component/Forma/Forma.js","component/ContactList/ContactsList.js","component/Filter/Filter.js","App.js","index.js","component/ContactList/contacts.module.css"],"names":["module","exports","Forma","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","resetForm","className","styles","form","preventDefault","label","htmlFor","input","id","onChange","type","pattern","title","required","button","ContactsList","contacts","onDelete","list","map","li","buttonDel","onClick","Filter","filter","filterInput","App","JSON","parse","window","localStorage","getItem","defaultContacts","setContacts","setFilter","useEffect","setItem","stringify","find","contact","toLowerCase","alert","newContact","includes","contactId","prevContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd9f94f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"filter_filter__16QMF\",\"filterInput\":\"filter_filterInput__18M9q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"forma_form__1yG8p\",\"label\":\"forma_label__20oiz\",\"input\":\"forma_input__3aXyp\",\"button\":\"forma_button__3sIg7\"};","import shortid from \"shortid\";\r\nimport styles from \"./forma.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Forma({ onSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    resetForm();\r\n  };\r\n  const resetForm = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit}>\r\n      <label className={styles.label} htmlFor={nameInputId}>\r\n        Name\r\n        <input\r\n          className={styles.input}\r\n          id={nameInputId}\r\n          value={name}\r\n          onChange={handleChange}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        ></input>\r\n      </label>\r\n      <label className={styles.label} htmlFor={numberInputId}>\r\n        Number\r\n        <input\r\n          className={styles.input}\r\n          id={numberInputId}\r\n          value={number}\r\n          onChange={handleChange}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        ></input>\r\n      </label>\r\n      <button className={styles.button} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n// export default class Forma extends Component {\r\n//   state = {\r\n//     contacts: [],\r\n//     name: \"\",\r\n//     number: \"\",\r\n//   };\r\n//   nameInputId = shortid.generate();\r\n//   numberInputId = shortid.generate();\r\n\r\n//   handleChange = (e) => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.onSubmit(this.state);\r\n//     this.resetForm();\r\n//   };\r\n//   resetForm = () => {\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n\r\n//     return (\r\n//       <form className={styles.form} onSubmit={this.handleSubmit}>\r\n//         <label className={styles.label} htmlFor={this.nameInputId}>\r\n//           Name\r\n//           <input\r\n//             className={styles.input}\r\n//             id={this.nameInputId}\r\n//             value={name}\r\n//             onChange={this.handleChange}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//           ></input>\r\n//         </label>\r\n//         <label className={styles.label} htmlFor={this.numberInputId}>\r\n//           Number\r\n//           <input\r\n//             className={styles.input}\r\n//             id={this.numberInputId}\r\n//             value={number}\r\n//             onChange={this.handleChange}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//           ></input>\r\n//         </label>\r\n//         <button className={styles.button} type=\"submit\">\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\nForma.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./contacts.module.css\";\r\n\r\nexport default function ContactsList({ contacts, onDelete }) {\r\n  return (\r\n    <ul className={styles.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={styles.li} key={id}>\r\n          {name}: {number}\r\n          <button className={styles.buttonDel} onClick={() => onDelete(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  }),\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./filter.module.css\";\r\n\r\nexport default function Filter({ value, onChange }) {\r\n  return (\r\n    <label className={styles.filter}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.filterInput}\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n}\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","import \"./App.css\";\nimport shortid from \"shortid\";\nimport Forma from \"./component/Forma/Forma.js\";\nimport ContactsList from \"./component/ContactList/ContactsList.js\";\nimport Filter from \"./component/Filter/Filter.js\";\nimport { useState, useEffect } from \"react\";\nimport defaultContacts from \"./component/data/defaultContacts.json\";\n//import { Component } from \"react\";\n// const useLocalStorage = (contacts, defaultContacts) => {\n//   const [state, setState] = useState(() => {\n//     return JSON.parse(window.localStorage.getItem(contacts)) ?? defaultContacts;\n//   });\n//   useEffect(() => {\n//     window.localStorage.setItem(contacts, JSON.stringify(state));\n//   }, [contacts, state]);\n//   return [state, setState];\n// };\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return (\n      JSON.parse(window.localStorage.getItem(\"contacts\")) ?? defaultContacts\n    );\n  });\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    setContacts((contacts) => [newContact, ...contacts]);\n  };\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n  const checkContact = () => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const removeContact = (contactId) => {\n    setContacts((prevContacts) =>\n      prevContacts.filter((contact) => contact.id !== contactId)\n    );\n  };\n\n  return (\n    <>\n      <section>\n        <h2>Phonebook</h2>\n        <Forma onSubmit={addContact} />\n      </section>\n      <section>\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={changeFilter} />\n\n        <ContactsList contacts={checkContact()} onDelete={removeContact} />\n      </section>\n    </>\n  );\n}\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n//       { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n//       { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n//       { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n//     ],\n//     filter: \"\",\n//   };\n//   addContact = ({ name, number }) => {\n//     if (\n//       this.state.contacts.find(\n//         (contact) => contact.name.toLowerCase() === name.toLowerCase()\n//       )\n//     ) {\n//       alert(`${name} is already in contacts`);\n//       return;\n//     }\n//     const newContact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n//     this.setState(({ contacts }) => ({\n//       contacts: [newContact, ...contacts],\n//     }));\n//   };\n\n//   checkContact = () => {\n//     const { contacts, filter } = this.state;\n//     return contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   };\n//   changeFilter = (e) => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   removeContact = (contactId) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== contactId\n//       ),\n//     }));\n//   };\n//   render() {\n//     const { filter } = this.state;\n//     return (\n//       <>\n//         <section>\n//           <h2>Phonebook</h2>\n//           <Forma onSubmit={this.addContact} />\n//         </section>\n//         <section>\n//           <h2>Contacts</h2>\n//           <Filter value={filter} onChange={this.changeFilter} />\n\n//           <ContactsList\n//             contacts={this.checkContact()}\n//             onDelete={this.removeContact}\n//           />\n//         </section>\n//       </>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDel\":\"contacts_buttonDel__3ZQ-j\",\"list\":\"contacts_list__2bTxz\",\"li\":\"contacts_li__228UZ\"};"],"sourceRoot":""}